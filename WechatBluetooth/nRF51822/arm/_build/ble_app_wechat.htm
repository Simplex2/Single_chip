<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\ble_app_wechat.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\ble_app_wechat.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Mar 05 15:36:53 2015
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mpbledemo2_init &rArr; mpbledemo2_get_md5 &rArr; md5 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC_IRQHandler</a><BR>
 <LI><a href="#[3b]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[35]">F</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[36]">G</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[14]">GPIOTE_IRQHandler</a> from app_gpiote.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[37]">H</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[b]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[38]">I</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[21]">LPCOMP_COMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">RTC1_IRQHandler</a> from app_timer.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">SWI0_IRQHandler</a> from app_timer.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[23]">SWI1_IRQHandler</a> from ble_radio_notification.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[24]">SWI2_IRQHandler</a> from ble_stack_handler.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[25]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[26]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[27]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_nrf51.o(.text) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[1a]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from app_uart_fifo.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[32]">ble_evt_dispatch</a> from comsource.o(.text) referenced from comsource.o(.text)
 <LI><a href="#[4]">ble_mpbledemo2_on_ble_evt</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[31]">bond_manager_error_handler</a> from comsource.o(.text) referenced from comsource.o(.text)
 <LI><a href="#[8]">button_pullup_handler</a> from comsource.o(.text) referenced 4 times from comsource.o(.data)
 <LI><a href="#[33]">conn_params_error_handler</a> from comsource.o(.text) referenced from comsource.o(.text)
 <LI><a href="#[2e]">detection_delay_timeout_handler</a> from app_button.o(.text) referenced from app_button.o(.text)
 <LI><a href="#[34]">fputc</a> from comsource.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2d]">gpiote_event_handler</a> from app_button.o(.text) referenced from app_button.o(.text)
 <LI><a href="#[2f]">gpiote_uart_event_handler</a> from app_uart_fifo.o(.text) referenced from app_uart_fifo.o(.text)
 <LI><a href="#[28]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">mpbledemo2_button_handler</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[2]">mpbledemo2_data_consume_func</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[3]">mpbledemo2_data_error_func</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[1]">mpbledemo2_data_free_func</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[0]">mpbledemo2_data_produce_func</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[5]">mpbledemo2_init</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[6]">mpbledemo2_main_process</a> from mpbledemo2.o(.text) referenced 2 times from mpbledemo2.o(.data)
 <LI><a href="#[2b]">softdevice_assertion_handler</a> from ble_stack_handler.o(.text) referenced from ble_stack_handler.o(.text)
 <LI><a href="#[30]">uart_event_handler</a> from comsource.o(.text) referenced from comsource.o(.text)
 <LI><a href="#[2c]">update_timeout_handler</a> from ble_conn_params.o(.text) referenced from ble_conn_params.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[167]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[179]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3b]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LPCOMP_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_nrf51.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; is_manual_peripheral_setup_needed &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_output_31_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf51.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>on_indicate_comfirm</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_indicate_comfirm &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_on_ble_evt
</UL>

<P><STRONG><a name="[41]"></a>wechat_error_chack</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wechat_error_chack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[47]"></a>ble_wechat_on_ble_evt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_wechat_on_ble_evt &rArr; on_write &rArr; wechat_error_chack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_indicate_comfirm
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[119]"></a>ble_wechat_add_service</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_wechat_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[4b]"></a>ble_wechat_add_indicate_char</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_wechat_add_indicate_char
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_characteristics
</UL>

<P><STRONG><a name="[50]"></a>ble_wechat_add_characteristics</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_wechat_add_characteristics &rArr; ble_wechat_add_read_char &rArr; get_mac_addr &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_indicate_char
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_read_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_write_char
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[51]"></a>ble_wechat_indicate_data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_wechat_indicate_data &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data_chunk
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auth
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_button_handler
</UL>

<P><STRONG><a name="[115]"></a>ble_stack_handler_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ble_stack_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_stack_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[53]"></a>intern_ble_stack_events_execute</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_stack_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intern_ble_stack_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>SWI2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_stack_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI2_IRQHandler &rArr; intern_ble_stack_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_ble_stack_events_execute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[57]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[60]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[61]"></a>ble_conn_params_change_conn_params</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[80]"></a>ble_bondmngr_bonded_master_delete</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_bondmngr_bonded_master_delete &rArr; sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_addr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_whitelist
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_pages_erase
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status
</UL>

<P><STRONG><a name="[84]"></a>ble_bondmngr_on_ble_evt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_bondmngr_on_ble_evt &rArr; on_auth_status &rArr; ble_bondmngr_bonded_master_delete &rArr; sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sec_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sec_info_request
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sys_attr_missing
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[85]"></a>ble_bondmngr_bonded_masters_store</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_bondmngr_bonded_masters_store &rArr; sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_erase
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_update
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_changed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_changed
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[86]"></a>ble_bondmngr_sys_attr_store</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_bondmngr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[87]"></a>ble_bondmngr_bonded_masters_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_bondmngr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_pages_erase
</UL>

<P><STRONG><a name="[88]"></a>ble_bondmngr_master_addr_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_bondmngr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[17f]"></a>ble_bondmngr_whitelist_get</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ble_bondmngr.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>ble_bondmngr_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_bondmngr_init &rArr; load_all_from_flash &rArr; sys_attr_load_from_flash &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_from_flash
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_pages_erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_manager_init
</UL>

<P><STRONG><a name="[180]"></a>ble_bondmngr_master_ids_get</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ble_bondmngr.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>ble_bondmngr_is_link_encrypted</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ble_bondmngr.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>ble_advdata_set</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[1f]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>app_timer_init</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[56]"></a>app_timer_create</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[5b]"></a>app_timer_start</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[58]"></a>app_timer_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_disable
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[b5]"></a>app_timer_stop_all</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
</UL>

<P><STRONG><a name="[b6]"></a>app_timer_cnt_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>

<P><STRONG><a name="[b7]"></a>app_timer_cnt_diff_compute</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>

<P><STRONG><a name="[14]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIOTE_IRQHandler &rArr; sense_level_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sense_level_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>app_gpiote_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_gpiote_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_init
</UL>

<P><STRONG><a name="[bb]"></a>app_gpiote_user_register</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_gpiote_user_register &rArr; pins_sense_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_sense_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[c2]"></a>app_gpiote_user_enable</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_gpiote_user_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[bd]"></a>app_gpiote_user_disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_sense_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
</UL>

<P><STRONG><a name="[bf]"></a>app_gpiote_pins_state_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_gpiote_pins_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_is_pushed
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_uart_event_handler
</UL>

<P><STRONG><a name="[c0]"></a>app_button_init</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, app_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_button_init &rArr; app_gpiote_user_register &rArr; pins_sense_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
</UL>

<P><STRONG><a name="[c1]"></a>app_button_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_button_enable &rArr; app_gpiote_user_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
</UL>

<P><STRONG><a name="[c3]"></a>app_button_disable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[c4]"></a>app_button_is_pushed</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_pins_state_get
</UL>

<P><STRONG><a name="[64]"></a>ble_flash_crc16_compute</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_flash_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_changed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_changed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_load_from_flash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_info_load_from_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
</UL>

<P><STRONG><a name="[67]"></a>ble_flash_word_write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_flash_word_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
</UL>

<P><STRONG><a name="[66]"></a>ble_flash_block_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ble_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
</UL>

<P><STRONG><a name="[6d]"></a>ble_flash_page_erase</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_pages_erase
</UL>

<P><STRONG><a name="[c7]"></a>ble_flash_page_write</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ble_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_unprotected_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
</UL>

<P><STRONG><a name="[c9]"></a>ble_flash_page_read</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, ble_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[65]"></a>ble_flash_page_addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_load_from_flash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_info_load_from_flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
</UL>

<P><STRONG><a name="[182]"></a>ble_flash_on_radio_active_evt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_flash.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>SWI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_radio_notification.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>ble_radio_notification_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_radio_notification.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>action_tx_stop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = action_tx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_ready
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_send
</UL>

<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_IRQHandler &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>app_uart_init</STRONG> (Thumb, 546 bytes, Stack size 56 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_uart_init &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_pins_state_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_standard_flow_control_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_no_flow_control_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[dc]"></a>app_uart_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_uart_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[dd]"></a>app_uart_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_uart_put &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[de]"></a>app_uart_flush</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_uart_fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_flush
</UL>

<P><STRONG><a name="[184]"></a>app_uart_get_connection_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_uart_fifo.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>app_uart_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_uart_fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d7]"></a>app_fifo_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[d5]"></a>app_fifo_put</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>app_fifo_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_send
</UL>

<P><STRONG><a name="[df]"></a>app_fifo_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_flush
</UL>

<P><STRONG><a name="[e1]"></a>mpbledemo2_get_md5</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mpbledemo2_get_md5 &rArr; md5 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_init
</UL>

<P><STRONG><a name="[e4]"></a>light_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpbledemo2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_init
</UL>

<P><STRONG><a name="[e5]"></a>mpbledemo2_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpbledemo2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_on_disconnect
</UL>

<P><STRONG><a name="[5]"></a>mpbledemo2_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = mpbledemo2_init &rArr; mpbledemo2_get_md5 &rArr; md5 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>light_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpbledemo2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[fb]"></a>light_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpbledemo2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[7]"></a>mpbledemo2_button_handler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpbledemo2_button_handler &rArr; ble_wechat_indicate_data &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_handler_by_type
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>device_auth</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = device_auth &rArr; ble_wechat_indicate_data &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_handler_by_type
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_main_process
</UL>

<P><STRONG><a name="[e8]"></a>device_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = device_init &rArr; ble_wechat_indicate_data &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_main_process
</UL>

<P><STRONG><a name="[4]"></a>ble_mpbledemo2_on_ble_evt</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_mpbledemo2_on_ble_evt &rArr; mpbledemo2_on_write &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_on_disconnect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_on_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>mpbledemo2_main_process</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpbledemo2_main_process &rArr; device_init &rArr; ble_wechat_indicate_data &rArr; ble_wechat_indicate_data_chunk
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>mpbledemo2_data_free_func</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpbledemo2_data_free_func &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>mpbledemo2_data_produce_func</STRONG> (Thumb, 722 bytes, Stack size 136 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mpbledemo2_data_produce_func &rArr; epb_pack_send_data_request &rArr; epb_set_message &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_send_data_request_pack_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_init_request_pack_size
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_auth_request_pack_size
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>mpbledemo2_data_consume_func</STRONG> (Thumb, 1172 bytes, Stack size 48 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mpbledemo2_data_consume_func &rArr; epb_unpack_send_data_response &rArr; epb_unpack_base_response &rArr; epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push_free
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response_free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_off
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_on
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>mpbledemo2_data_error_func</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpbledemo2_data_error_func &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpbledemo2.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>led_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_start &rArr; gpiote_init &rArr; nrf_gpiote_task_config
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[112]"></a>led_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; resource_init &rArr; advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_app_event
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[34]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; app_uart_put &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[49]"></a>app_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler_execute
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_ble_stack_events_execute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_characteristics
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_manager_error_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_manager_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pullup_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_app_event
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_main_process
</UL>

<P><STRONG><a name="[52]"></a>assert_nrf_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_assertion_handler
</UL>

<P><STRONG><a name="[31]"></a>bond_manager_error_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comsource.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>conn_params_error_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comsource.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>uart_init</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = uart_init &rArr; app_uart_init &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[10c]"></a>data_handler_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_handler_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[10d]"></a>get_mac_addr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_mac_addr &rArr; putc &rArr; fputc &rArr; app_uart_put &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[10e]"></a>timers_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timers_init &rArr; app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[110]"></a>advertising_init</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[107]"></a>advertising_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = advertising_start &rArr; led_start &rArr; gpiote_init &rArr; nrf_gpiote_task_config
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>on_ble_evt</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_ble_evt &rArr; ble_bondmngr_bonded_masters_store &rArr; sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[11a]"></a>register_all_products</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[108]"></a>wait_app_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_app_event
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>resource_init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = resource_init &rArr; advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_all_products
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handler_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_manager_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>get_handler_by_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_wechat_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handler_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auth
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_button_handler
</UL>

<P><STRONG><a name="[11d]"></a>checkCPUendian</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_wechat_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkCPUendian
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ntohl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_htonl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[11c]"></a>t_htonl</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ble_wechat_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCPUendian
</UL>

<P><STRONG><a name="[11e]"></a>t_ntohl</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ble_wechat_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCPUendian
</UL>

<P><STRONG><a name="[eb]"></a>htons</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ble_wechat_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = htons &rArr; checkCPUendian
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCPUendian
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[44]"></a>ntohs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ble_wechat_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntohs &rArr; checkCPUendian
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCPUendian
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auth
</UL>

<P><STRONG><a name="[148]"></a>epb_unpack_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
</UL>

<P><STRONG><a name="[124]"></a>epb_has_tag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = epb_has_tag &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
</UL>

<P><STRONG><a name="[125]"></a>epb_get_uint32</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = epb_get_uint32 &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_varint32_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_enum
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bool
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_sint32
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_int32
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
</UL>

<P><STRONG><a name="[126]"></a>epb_get_int32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = epb_get_int32 &rArr; epb_get_uint32 &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
</UL>

<P><STRONG><a name="[127]"></a>epb_get_sint32</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
</UL>

<P><STRONG><a name="[128]"></a>epb_get_bool</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
</UL>

<P><STRONG><a name="[129]"></a>epb_get_enum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = epb_get_enum &rArr; epb_get_uint32 &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
</UL>

<P><STRONG><a name="[12a]"></a>epb_get_bytes</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_varint32_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_string
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
</UL>

<P><STRONG><a name="[12b]"></a>epb_get_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
</UL>

<P><STRONG><a name="[12c]"></a>epb_get_message</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = epb_get_message &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
</UL>

<P><STRONG><a name="[12d]"></a>epb_get_fixed32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32_bits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_float
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_sfixed32
</UL>

<P><STRONG><a name="[12e]"></a>epb_get_sfixed32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32
</UL>

<P><STRONG><a name="[12f]"></a>epb_get_float</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32
</UL>

<P><STRONG><a name="[145]"></a>epb_pack_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_base_request
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[146]"></a>epb_get_packed_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_base_request
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[134]"></a>epb_set_uint32</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = epb_set_uint32 &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_varint32_bits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_enum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bool
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_sint32
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_int32
</UL>

<P><STRONG><a name="[135]"></a>epb_set_int32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = epb_set_int32 &rArr; epb_set_uint32 &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[136]"></a>epb_set_sint32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>

<P><STRONG><a name="[137]"></a>epb_set_bool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>

<P><STRONG><a name="[138]"></a>epb_set_enum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = epb_set_enum &rArr; epb_set_uint32 &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[13b]"></a>epb_set_bytes</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_length_delimited
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_varint32_bits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_message
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_string
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[13c]"></a>epb_set_string</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = epb_set_string &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[13d]"></a>epb_set_message</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = epb_set_message &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[13e]"></a>epb_set_fixed32</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32_bits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_float
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_sfixed32
</UL>

<P><STRONG><a name="[13f]"></a>epb_set_sfixed32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32
</UL>

<P><STRONG><a name="[140]"></a>epb_set_float</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32
</UL>

<P><STRONG><a name="[141]"></a>epb_varint32_pack_size</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_varint32_pack_size
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_length_delimited_pack_size
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_send_data_request_pack_size
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_auth_request_pack_size
</UL>

<P><STRONG><a name="[142]"></a>epb_fixed32_pack_size</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_tag
</UL>

<P><STRONG><a name="[143]"></a>epb_length_delimited_pack_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = epb_length_delimited_pack_size &rArr; epb_varint32_pack_size
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_varint32_pack_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_send_data_request_pack_size
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_init_request_pack_size
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_auth_request_pack_size
</UL>

<P><STRONG><a name="[14c]"></a>epb_base_request_pack_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, epb_mmbp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_send_data_request_pack_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_init_request_pack_size
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_auth_request_pack_size
</UL>

<P><STRONG><a name="[144]"></a>epb_pack_base_request</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = epb_pack_base_request
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_packed_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
</UL>

<P><STRONG><a name="[147]"></a>epb_unpack_base_response</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = epb_unpack_base_response &rArr; epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_int32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
</UL>

<P><STRONG><a name="[149]"></a>epb_unpack_base_response_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epb_unpack_base_response_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response_free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response_free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response_free
</UL>

<P><STRONG><a name="[14a]"></a>epb_unpack_base_push</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = epb_unpack_base_push &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
</UL>

<P><STRONG><a name="[14b]"></a>epb_unpack_base_push_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epb_unpack_base_push_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push_free
</UL>

<P><STRONG><a name="[ec]"></a>epb_auth_request_pack_size</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = epb_auth_request_pack_size &rArr; epb_length_delimited_pack_size &rArr; epb_varint32_pack_size
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_length_delimited_pack_size
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_varint32_pack_size
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[ed]"></a>epb_pack_auth_request</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = epb_pack_auth_request &rArr; epb_set_message &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_base_request
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_message
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_string
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_enum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_int32
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_packed_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[f2]"></a>epb_unpack_auth_response</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = epb_unpack_auth_response &rArr; epb_unpack_base_response &rArr; epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[f3]"></a>epb_unpack_auth_response_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_auth_response_free &rArr; epb_unpack_base_response_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[ee]"></a>epb_init_request_pack_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = epb_init_request_pack_size &rArr; epb_length_delimited_pack_size &rArr; epb_varint32_pack_size
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_length_delimited_pack_size
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[ef]"></a>epb_pack_init_request</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = epb_pack_init_request &rArr; epb_set_message &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_base_request
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_message
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_packed_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[f6]"></a>epb_unpack_init_response</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = epb_unpack_init_response &rArr; epb_unpack_base_response &rArr; epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_string
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_enum
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_int32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[f8]"></a>epb_unpack_init_response_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_init_response_free &rArr; epb_unpack_base_response_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[f0]"></a>epb_send_data_request_pack_size</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = epb_send_data_request_pack_size &rArr; epb_length_delimited_pack_size &rArr; epb_varint32_pack_size
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_length_delimited_pack_size
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_varint32_pack_size
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[f1]"></a>epb_pack_send_data_request</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = epb_pack_send_data_request &rArr; epb_set_message &rArr; epb_set_bytes &rArr; epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_base_request
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_base_request_pack_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_message
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_enum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_packed_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[f4]"></a>epb_unpack_send_data_response</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = epb_unpack_send_data_response &rArr; epb_unpack_base_response &rArr; epb_get_string &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[f5]"></a>epb_unpack_send_data_response_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_send_data_response_free &rArr; epb_unpack_base_response_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[f9]"></a>epb_unpack_recv_data_push</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = epb_unpack_recv_data_push &rArr; epb_get_message &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_enum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[fc]"></a>epb_unpack_recv_data_push_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_recv_data_push_free &rArr; epb_unpack_base_push_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[fd]"></a>epb_unpack_switch_view_push</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = epb_unpack_switch_view_push &rArr; epb_get_message &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_enum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[fe]"></a>epb_unpack_switch_view_push_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_switch_view_push_free &rArr; epb_unpack_base_push_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[ff]"></a>epb_unpack_switch_backgroud_push</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = epb_unpack_switch_backgroud_push &rArr; epb_get_message &rArr; epb_get_bytes &rArr; epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_enum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[100]"></a>epb_unpack_switch_backgroud_push_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, epb_mmbp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_unpack_switch_backgroud_push_free &rArr; epb_unpack_base_push_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push_free
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[35]"></a>F</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = F
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>G</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>H</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md5.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>I</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>rotate_left</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rotate_left
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[14e]"></a>count_padding_bits</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
</UL>

<P><STRONG><a name="[14d]"></a>append_padding_bits</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = append_padding_bits &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_padding_bits
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[e2]"></a>md5</STRONG> (Thumb, 480 bytes, Stack size 216 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = md5 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_left
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
</UL>

<P><STRONG><a name="[f7]"></a>crc32</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc32 &rArr; crc_table
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_store
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_manager_init
</UL>

<P><STRONG><a name="[186]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_array_encode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_master_addr_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sec_info_request
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status_from_new_master
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_length_delimited
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32_bits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_varint32_bits
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32_bits
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_sys_attr_store
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_from_flash
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_find_in_db
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status_from_new_master
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_load_from_flash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_info_load_from_flash
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_indicate_char
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_read_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_write_char
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14f]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
</UL>

<P><STRONG><a name="[4d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_indicate_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_write_char
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
</UL>

<P><STRONG><a name="[76]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_equal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_equal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_info_equal
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[18b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15c]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[16e]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[18d]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[18f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[190]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[191]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[193]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[42]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_error_chack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pullup_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_error_func
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_consume_func
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_auth
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_button_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_on_write
</UL>

<P><STRONG><a name="[160]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16d]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_nrf51.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_error_chack
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_output_31_setup_needed
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[172]"></a>__ARM_fpclassify</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[16c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 844 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[16f]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[170]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[171]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[173]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[194]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[195]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[196]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[177]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[156]"></a>floor</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[4a]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push_free
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response_free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_free_func
</UL>

<P><STRONG><a name="[45]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_padding_bits
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_push
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_base_response
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_view_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_switch_backgroud_push
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_send_data_response
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_recv_data_push
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_init_response
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_unpack_auth_response
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_send_data_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_init_request
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_auth_request
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_data_produce_func
</UL>

<P><STRONG><a name="[e3]"></a>putc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = putc &rArr; fputc &rArr; app_uart_put &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_get_md5
</UL>

<P><STRONG><a name="[154]"></a>sin</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3c]"></a>is_output_31_setup_needed</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, system_nrf51.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_output_31_setup_needed &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3e]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, system_nrf51.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_manual_peripheral_setup_needed &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[40]"></a>ble_wechat_indicate_data_chunk</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_wechat_indicate_data_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_indicate_data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_indicate_comfirm
</UL>

<P><STRONG><a name="[43]"></a>on_write</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_write &rArr; wechat_error_chack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wechat_error_chack
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_on_ble_evt
</UL>

<P><STRONG><a name="[48]"></a>get_mac_addr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_mac_addr &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_read_char
</UL>

<P><STRONG><a name="[4e]"></a>ble_wechat_add_write_char</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_wechat_add_write_char
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_characteristics
</UL>

<P><STRONG><a name="[4f]"></a>ble_wechat_add_read_char</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, ble_wechat_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ble_wechat_add_read_char &rArr; get_mac_addr &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_addr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_characteristics
</UL>

<P><STRONG><a name="[2b]"></a>softdevice_assertion_handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_stack_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_assertion_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_stack_handler.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2c]"></a>update_timeout_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>conn_params_negotiation</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[5c]"></a>on_connect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[5d]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[5e]"></a>on_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[5f]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[6a]"></a>crc_extract</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_bondmngr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_load_from_flash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_info_load_from_flash
</UL>

<P><STRONG><a name="[62]"></a>bond_info_store</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bond_info_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_word_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_addr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_block_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status_from_new_master
</UL>

<P><STRONG><a name="[68]"></a>sys_attr_store</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_word_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_addr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_block_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_sys_attr_store
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
</UL>

<P><STRONG><a name="[69]"></a>bonding_info_load_from_flash</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bonding_info_load_from_flash &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_addr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_extract
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_from_flash
</UL>

<P><STRONG><a name="[6b]"></a>sys_attr_load_from_flash</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_attr_load_from_flash &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_addr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_extract
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_from_flash
</UL>

<P><STRONG><a name="[6c]"></a>flash_pages_erase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_pages_erase &rArr; ble_flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_delete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
</UL>

<P><STRONG><a name="[6e]"></a>bond_info_changed</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bond_info_changed &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
</UL>

<P><STRONG><a name="[6f]"></a>sys_attr_changed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_attr_changed &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
</UL>

<P><STRONG><a name="[7e]"></a>master_sys_attr_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = master_sys_attr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sec_update
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sys_attr_missing
</UL>

<P><STRONG><a name="[71]"></a>update_whitelist</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_all_from_flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status_from_new_master
</UL>

<P><STRONG><a name="[70]"></a>on_auth_status_from_new_master</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_auth_status_from_new_master &rArr; bond_info_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_whitelist
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status
</UL>

<P><STRONG><a name="[72]"></a>master_update</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = master_update &rArr; update_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_whitelist
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_masters_store
</UL>

<P><STRONG><a name="[73]"></a>master_find_in_db</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = master_find_in_db &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_sec_info_request
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status
</UL>

<P><STRONG><a name="[74]"></a>load_all_from_flash</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = load_all_from_flash &rArr; sys_attr_load_from_flash &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_whitelist
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_attr_load_from_flash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_info_load_from_flash
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_init
</UL>

<P><STRONG><a name="[7a]"></a>sec_levels_equal</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ble_bondmngr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
</UL>

<P><STRONG><a name="[7b]"></a>sec_keys_equal</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_bondmngr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
</UL>

<P><STRONG><a name="[75]"></a>enc_info_equal</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enc_info_equal &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
</UL>

<P><STRONG><a name="[77]"></a>irk_equal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = irk_equal &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
</UL>

<P><STRONG><a name="[78]"></a>addr_equal</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_equal &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
</UL>

<P><STRONG><a name="[79]"></a>auth_status_equal</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = auth_status_equal &rArr; addr_equal &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_equal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irk_equal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc_info_equal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keys_equal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_levels_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_update
</UL>

<P><STRONG><a name="[7c]"></a>on_connect</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = on_connect &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
</UL>

<P><STRONG><a name="[7d]"></a>on_sys_attr_missing</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_sys_attr_missing &rArr; master_sys_attr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_sys_attr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
</UL>

<P><STRONG><a name="[7f]"></a>auth_status_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = auth_status_update &rArr; bond_info_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_equal
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_info_store
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status
</UL>

<P><STRONG><a name="[81]"></a>on_auth_status</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_auth_status &rArr; ble_bondmngr_bonded_master_delete &rArr; sys_attr_store &rArr; ble_flash_block_write &rArr; flash_word_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_bonded_master_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_update
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_find_in_db
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_auth_status_from_new_master
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
</UL>

<P><STRONG><a name="[82]"></a>on_sec_info_request</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_sec_info_request &rArr; master_find_in_db &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_find_in_db
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
</UL>

<P><STRONG><a name="[83]"></a>on_sec_update</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ble_bondmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_sec_update &rArr; master_sys_attr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_sys_attr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
</UL>

<P><STRONG><a name="[94]"></a>name_encode</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[8a]"></a>appearance_encode</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[8c]"></a>uint8_array_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uint8_array_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[95]"></a>tx_power_level_encode</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[8e]"></a>uuid_list_sized_encode</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[8d]"></a>uuid_list_encode</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[90]"></a>conn_int_check</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[8f]"></a>conn_int_encode</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[91]"></a>manuf_specific_data_encode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[92]"></a>service_data_encode</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[93]"></a>adv_data_encode</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_array_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[97]"></a>advdata_check</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[98]"></a>srdata_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[8b]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[9a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[99]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[9b]"></a>rtc1_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[9e]"></a>rtc1_stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[a9]"></a>timer_list_insert</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[a7]"></a>timer_list_remove</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[9f]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[a1]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[a2]"></a>timeout_handler_exec</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[a3]"></a>timer_timeouts_check</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[a6]"></a>list_deletions_handler</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[ad]"></a>expired_timers_handler</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[a8]"></a>list_insertions_handler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[aa]"></a>compare_reg_update</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[ab]"></a>timer_list_handler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_all_op_schedule
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[ae]"></a>timer_start_op_schedule</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[b0]"></a>timer_stop_op_schedule</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[b1]"></a>timer_stop_all_op_schedule</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_all
</UL>

<P><STRONG><a name="[b3]"></a>user_id_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_id_get &rArr; current_int_priority_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop_all
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
</UL>

<P><STRONG><a name="[9c]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[b4]"></a>current_int_priority_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
</UL>

<P><STRONG><a name="[a4]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[a5]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[b8]"></a>sense_level_toggle</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sense_level_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>pins_sense_disable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pins_sense_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_disable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
</UL>

<P><STRONG><a name="[be]"></a>button_handler_execute</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_handler_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[2e]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, app_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = detection_delay_timeout_handler &rArr; button_handler_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler_execute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_pins_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>gpiote_event_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>flash_page_erase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_erase
</UL>

<P><STRONG><a name="[c8]"></a>flash_word_unprotected_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ble_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_write
</UL>

<P><STRONG><a name="[c5]"></a>flash_word_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_word_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_page_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_word_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_block_write
</UL>

<P><STRONG><a name="[cf]"></a>action_uart_deactivate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_uart_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_tx_ready
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cts_high
</UL>

<P><STRONG><a name="[ca]"></a>action_tx_send</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_put
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cts_low
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_ready
</UL>

<P><STRONG><a name="[cd]"></a>action_tx_ready</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_stop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_tx_ready
</UL>

<P><STRONG><a name="[ce]"></a>on_cts_high</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_cts_high
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_uart_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d0]"></a>on_cts_low</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_cts_low &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d1]"></a>on_tx_ready</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_ready
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_uart_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d2]"></a>on_uart_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_uart_put &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_tx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d3]"></a>on_uart_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_uart_close
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_uart_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>

<P><STRONG><a name="[d4]"></a>on_uart_event</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_put
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_tx_ready
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cts_low
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_cts_high
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_uart_event_handler
</UL>

<P><STRONG><a name="[2f]"></a>gpiote_uart_event_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpiote_uart_event_handler &rArr; on_uart_event &rArr; on_tx_ready &rArr; action_tx_ready &rArr; action_tx_send &rArr; action_tx_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_pins_state_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_uart_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>uart_no_flow_control_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_uart_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[d9]"></a>uart_standard_flow_control_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_uart_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[db]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_uart_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[d8]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_uart_fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[e9]"></a>mpbledemo2_on_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpbledemo2_on_write &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mpbledemo2_on_ble_evt
</UL>

<P><STRONG><a name="[ea]"></a>mpbledemo2_on_disconnect</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mpbledemo2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mpbledemo2_on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpbledemo2_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mpbledemo2_on_ble_evt
</UL>

<P><STRONG><a name="[105]"></a>timer1_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
</UL>

<P><STRONG><a name="[101]"></a>ppi_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ppi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
</UL>

<P><STRONG><a name="[102]"></a>gpiote_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpiote_init &rArr; nrf_gpiote_task_config
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_config
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
</UL>

<P><STRONG><a name="[103]"></a>nrf_gpiote_task_config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_task_config
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_init
</UL>

<P><STRONG><a name="[10a]"></a>gpiote_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpiote_init &rArr; app_gpiote_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[30]"></a>uart_event_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_event_handler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comsource.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>button_pullup_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = button_pullup_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comsource.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>buttons_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = buttons_init &rArr; app_button_init &rArr; app_gpiote_user_register &rArr; pins_sense_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[113]"></a>bond_manager_init</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bond_manager_init &rArr; ble_bondmngr_init &rArr; load_all_from_flash &rArr; sys_attr_load_from_flash &rArr; ble_flash_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[32]"></a>ble_evt_dispatch</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ble_evt_dispatch &rArr; ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bondmngr_on_ble_evt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_on_ble_evt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comsource.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>ble_stack_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_stack_init &rArr; ble_stack_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_handler_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[116]"></a>conn_params_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[117]"></a>gap_params_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gap_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[11b]"></a>sec_params_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[118]"></a>services_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, comsource.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = services_init &rArr; ble_wechat_add_characteristics &rArr; ble_wechat_add_read_char &rArr; get_mac_addr &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_characteristics
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_wechat_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init
</UL>

<P><STRONG><a name="[109]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comsource.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pullup_handler
</UL>

<P><STRONG><a name="[122]"></a>epb_get_wire_type</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
</UL>

<P><STRONG><a name="[120]"></a>epb_get_varint32_bits</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epb_get_varint32_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_value_length
</UL>

<P><STRONG><a name="[11f]"></a>epb_get_value_length</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_varint32_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_tag_value_offset
</UL>

<P><STRONG><a name="[121]"></a>epb_get_tag_value_offset</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = epb_get_tag_value_offset &rArr; epb_get_value_length &rArr; epb_get_varint32_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_value_length
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_wire_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_bytes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_uint32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_has_tag
</UL>

<P><STRONG><a name="[123]"></a>epb_get_fixed32_bits</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_get_fixed32
</UL>

<P><STRONG><a name="[130]"></a>epb_pack_tag</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = epb_pack_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_buf_remain
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sizeof_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>

<P><STRONG><a name="[133]"></a>epb_pack_varint32_bits</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = epb_pack_varint32_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_buf_remain
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_uint32
</UL>

<P><STRONG><a name="[139]"></a>epb_set_fixed32_bits</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, epb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_buf_remain
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32
</UL>

<P><STRONG><a name="[13a]"></a>epb_pack_length_delimited</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, epb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = epb_pack_length_delimited &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_buf_remain
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_bytes
</UL>

<P><STRONG><a name="[131]"></a>sizeof_tag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_fixed32_pack_size
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_varint32_pack_size
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_tag
</UL>

<P><STRONG><a name="[132]"></a>epb_pack_buf_remain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, epb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_length_delimited
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_set_fixed32_bits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_varint32_bits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epb_pack_tag
</UL>

<P><STRONG><a name="[159]"></a>crc_table</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>

<P><STRONG><a name="[16b]"></a>_printf_core</STRONG> (Thumb, 1072 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[175]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[174]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
